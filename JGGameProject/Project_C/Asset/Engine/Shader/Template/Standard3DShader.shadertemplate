SamplerState gPointSampler
{
	Template = Point_Wrap
};

cbuffer Camera
{
	float4x4 gViewProj;
};
cbuffer ObjectParams
{
	float4x4 gWorld;
}

struct VS_IN
{
	float3 posL : POSITION;
	float2 tex : TEXCOORD;
	float3 normalL : NORMAL;
	float3 tanL : TANGENT;
	float3 bitL : BITANGENT;
};
struct VS_OUT
{
	float4 posH    : SV_POSITION;
	float3 posW    : POSITION;
	float3 normalW : NORMAL;
	float3 tanW	   : TANGENT;
	float3 bitW    : BITANGENT;
	float2 tex     : TEXCOORD;
};




__PS_SURFACE_VARIABLES_SCRIPT__
__PS_SURFACE_RESOURCES_SCRIPT__

struct PS_SURFACE_OUTPUT
{
	float4 albedo;
	float3 normal;
};
struct PS_SURFACE_INPUT
{
	float3 position;
	float3 normal;
	float3 tangent;
	float3 bitangent;
};

PS_SURFACE_OUTPUT PS_SURFACE_FUNCTION(PS_SURFACE_INPUT _input)
{
	PS_SURFACE_OUTPUT _output;
	_output.albedo = float4(1.0f,1.0f,1.0f,1.0f);


	__PS_SURFACE_FUNCTION_SCRIPT__
	return _output;
};
		
		
VS_OUT vs_main(VS_IN vin)
{
	VS_OUT vout;
		    
	float3 posW = mul(float4(vin.posL, 1.0f), gWorld);
	float3 normalW = mul(float4(vin.normalL, 0.0f), gWorld);
	float3 tanW =  mul(float4(vin.tanL, 0.0f), gWorld);
	float3 bitW =  mul(float4(vin.bitL, 0.0f), gWorld);
	vout.posH = mul(float4(posW, 1.0f), gViewProj);
	vout.posW = posW;
	vout.normalW = normalize(normalW);
	vout.tex   = vin.tex;
	return vout;
}
float4 ps_main(VS_OUT pin) : SV_TARGET
{
	PS_SURFACE_INPUT input;
	PS_SURFACE_OUTPUT output = PS_SURFACE_FUNCTION(input);

	float3 dirLightColor = float3(0.9f, 0.95f, 1.0f);
	float3 dirLight = float3(0.0f, 0.0f, 1.0f);

	float4 ambientLight = float4(0.2f, 0.2f, 0.25f, 1.0f);

	float3 N = normalize(pin.normalW);
	float3 L = normalize(-dirLight);
	float NdotL = saturate(dot(N,L));
	return output.albedo * NdotL + ambientLight;
}