Texture2D<float3> BloomBuf;
RWTexture2D<float3> Result1;
RWTexture2D<float3> Result2;
RWTexture2D<float3> Result3;
RWTexture2D<float3> Result4;

SamplerState BiLinearClamp
{
    Template = Linear_Border_TransparentBlack
};

cbuffer cb0
{
    float2 InverseDimensions;
};

groupshared float3 Tile[64];    // 8x8 input pixels


[numthreads( 8, 8, 1 )]
void cs_main( uint GI : SV_GroupIndex, uint3 DTid : SV_DispatchThreadID )
{
    // You can tell if both x and y are divisible by a power of two with this value
    uint parity = DTid.x | DTid.y;

    // Downsample and store the 8x8 block
    float2 centerUV = (float2(DTid.xy) * 2.0f + 1.0f) * InverseDimensions;
    float3 avgPixel = BloomBuf.SampleLevel(BiLinearClamp, centerUV, 0.0f);
    Tile[GI] = avgPixel;
    Result1[DTid.xy] = avgPixel;

    GroupMemoryBarrierWithGroupSync();

    // Downsample and store the 4x4 block
    if ((parity & 1) == 0)
    {
        avgPixel = 0.25f * (avgPixel + Tile[GI+1] + Tile[GI+8] + Tile[GI+9]);
        Tile[GI] = avgPixel;
        Result2[DTid.xy >> 1] = avgPixel;
    }

    GroupMemoryBarrierWithGroupSync();

    // Downsample and store the 2x2 block
    if ((parity & 3) == 0)
    {
        avgPixel = 0.25f * (avgPixel + Tile[GI+2] + Tile[GI+16] + Tile[GI+18]);
        Tile[GI] = avgPixel;
        Result3[DTid.xy >> 2] = avgPixel;
    }

    GroupMemoryBarrierWithGroupSync();

    // Downsample and store the 1x1 block
    if ((parity & 7) == 0)
    {
        avgPixel = 0.25f * (avgPixel + Tile[GI+4] + Tile[GI+32] + Tile[GI+36]);
        Result4[DTid.xy >> 3] = avgPixel;
    }
}