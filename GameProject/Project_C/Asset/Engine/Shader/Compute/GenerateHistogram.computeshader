


Texture2D<uint> LumaBuf;
RWByteAddressBuffer Histogram;

groupshared uint TileHistogram[256];

cbuffer CB0
{
    uint kBufferHeight;
}

[numthreads( 16, 16, 1 )]
void cs_main( uint GI : SV_GroupIndex, uint3 DTid : SV_DispatchThreadID )
{
    TileHistogram[GI] = 0;

    GroupMemoryBarrierWithGroupSync();

    // Loop until the entire column has been processed
    for (uint2 ST = DTid.xy; ST.y < kBufferHeight; ST.y += 16)
    {
        uint QuantizedLogLuma = LumaBuf[ST];
        InterlockedAdd( TileHistogram[QuantizedLogLuma], 1 );
    }

    GroupMemoryBarrierWithGroupSync();

    Histogram.InterlockedAdd( GI * 4, TileHistogram[GI] );
}