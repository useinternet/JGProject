
#define JG_PI 3.141592
#define SCRIPT_FLAG_IGNORE_LIGHTPASS 1


struct Material
{
    float3 WorldPosition;
    float3 Albedo;
    float Roughness;
    float Metallic;
    float3 Emissive;
};

struct DirectionalLight
{
    float3 Direction;
    float3 LightColor;
};

struct PointLight
{
    float3 Position;
    float  Range;
    float3 Color;
    float  AttRange;
    float  Intensity;
    float  Att0;
    float  Att1;
    float  Att2;
};

struct LightGrid
{
    int PL_Count;
    int PL_Offset;
};

struct Cluster
{
    float4 Min;
    float4 Max;
};




SamplerState _PointWrap  : register(s0);
SamplerState _LinearWrap : register(s1);
SamplerState _AnisotropicWrap : register(s2);
SamplerState _PointClamp  : register(s3);
SamplerState _LinearClamp : register(s4);
SamplerState _AnisotropicClamp : register(s5);
SamplerState _LinearBorder_TB : register(s6);




































float3 REC709toREC2020( float3 RGB709 )
{
    static const float3x3 ConvMat =
    {
        0.627402, 0.329292, 0.043306,
        0.069095, 0.919544, 0.011360,
        0.016394, 0.088028, 0.895578
    };
    return mul(ConvMat, RGB709);
}

float3 REC2020toREC709(float3 RGB2020)
{
    static const float3x3 ConvMat =
    {
        1.660496, -0.587656, -0.072840,
        -0.124547, 1.132895, -0.008348,
        -0.018154, -0.100597, 1.118751
    };
    return mul(ConvMat, RGB2020);
}

float3 REC709toDCIP3( float3 RGB709 )
{
    static const float3x3 ConvMat =
    {
        0.822458, 0.177542, 0.000000,
        0.033193, 0.966807, 0.000000,
        0.017085, 0.072410, 0.910505
    };
    return mul(ConvMat, RGB709);
}

float3 DCIP3toREC709( float3 RGBP3 )
{
    static const float3x3 ConvMat =
    {
        1.224947, -0.224947, 0.000000,
        -0.042056, 1.042056, 0.000000,
        -0.019641, -0.078651, 1.098291
    };
    return mul(ConvMat, RGBP3);
}

float LinearToLogLuminance( float x, float gamma = 4.0 )
{
    return log2(lerp(1, exp2(gamma), x)) / gamma;
}

float RGBToLuminance( float3 x )
{
    return dot( x, float3(0.212671, 0.715160, 0.072169) );
}

float MaxChannel(float3 x)
{
    return max(x.x, max(x.y, x.z));
}

float RGBToLogLuminance( float3 x, float gamma = 4.0 )
{
    return LinearToLogLuminance( RGBToLuminance(x), gamma );
}

float3 TM( float3 rgb )
{
    return rgb / (1 + RGBToLuminance(rgb));
}

float3 ITM( float3 rgb )
{
    return rgb / (1 - RGBToLuminance(rgb));
}

float3 RGBFullToLimited8bit( float3 x )
{
    return saturate(x) * 219.0 / 255.0 + 16.0 / 255.0;
}

float3 RGBLimitedToFull8bit( float3 x )
{
    return saturate((x - 16.0 / 255.0) * 255.0 / 219.0);
}

float3 RGBFullToLimited10bit( float3 x )
{
    return saturate(x) * 876.0 / 1023.0 + 64.0 / 1023.0;
}

float3 RGBLimitedToFull10bit( float3 x )
{
    return saturate((x - 64.0 / 1023.0) * 1023.0 / 876.0);
}
