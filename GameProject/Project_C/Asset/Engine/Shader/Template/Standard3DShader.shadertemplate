
struct VS_IN
{
	float3 posL : POSITION;
	float2 tex : TEXCOORD;
	float3 normalL : NORMAL;
	float3 tanL : TANGENT;
	float3 bitL : BITANGENT;
};
struct VS_OUT
{
	float4 posH    : SV_POSITION;
	float3 posW    : POSITION;
	float3 posL     : LOCAL_POSITION;
	float3 normalW : NORMAL;
	float3 tanW	   : TANGENT;
	float3 bitW    : BITANGENT;
	float2 tex     : TEXCOORD;
	float2 depth	: DEPTH;
};

__PS_SURFACE_VARIABLES_SCRIPT__
__PS_SURFACE_RESOURCES_SCRIPT__
__PS_SURFACE_FUNCTION_SCRIPT__

struct PS_SURFACE_OUTPUT
{
	float4 albedo;
	float3 normal;
	float3 specular;
	float roughness;
	float metallic;
	float3 emissive;
    int flags;
};


struct PS_SURFACE_INPUT
{
	float3 position;
	float3 local_position;
	float3 normal;
	float3 tangent;
	float3 bitangent;
	float2 tex;
};


PS_SURFACE_OUTPUT PS_SURFACE_FUNCTION(PS_SURFACE_INPUT _input)
{
	PS_SURFACE_OUTPUT _output;
	_output.albedo    = float4(1.0f,1.0f,1.0f,1.0f);
	_output.specular  = float3(0.5f, 0.5f, 0.5f);
	_output.normal    = _input.normal;
    _output.roughness = 0.0f;
	_output.metallic  = 0.0f;
	_output.emissive = float3(0.0f,0.0f,0.0f);
	_output.flags = 0;

	__PS_SURFACE_CONTENTS_SCRIPT__
	return _output;
};
		
		
VS_OUT vs_main(VS_IN vin)
{
	VS_OUT vout;
	vout.posL = vin.posL;
	float3 posW = mul(float4(vin.posL, 1.0f), _WorldMatrix);
	float3 normalW = mul(float4(vin.normalL, 0.0f), _WorldMatrix);
	float3 tanW =  mul(float4(vin.tanL, 0.0f), _WorldMatrix);
	float3 bitW =  mul(float4(vin.bitL, 0.0f), _WorldMatrix);
	vout.posH = mul(float4(posW, 1.0f), _ViewProjMatrix);
	vout.posW = posW;
	vout.normalW = normalize(normalW);
	vout.tanW = normalize(tanW);
	vout.bitW = normalize(bitW);
	vout.tex   = vin.tex;
	vout.depth = float2(vout.posH.z, vout.posH.w);
	return vout;
}

struct PS_OUT
{
	float4 Albedo : SV_TARGET0;
	float4 Normal : SV_TARGET1;
	float4 Specular : SV_TARGET2;
	float3 Emissive : SV_TARGET3;
	float4 Material_0 : SV_TARGET4;
	float  Depth : SV_TARGET5;
};


PS_OUT ps_main(VS_OUT pin) : SV_TARGET
{
	PS_SURFACE_INPUT input;
	input.position = pin.posW;
	input.local_position = pin.posL;
	input.normal   = normalize(pin.normalW);
	input.tangent  = normalize(pin.tanW);
	input.bitangent = normalize(pin.bitW);
	input.tex       = pin.tex;
	PS_SURFACE_OUTPUT output = PS_SURFACE_FUNCTION(input);


	PS_OUT ps_out;
	ps_out.Albedo   = output.albedo;
	ps_out.Normal   = float4(output.normal.rgb, 1.0f);
	ps_out.Specular = float4(output.specular, 1.0f);
	ps_out.Emissive = pin.posH.xyz; //output.emissive;
	
	ps_out.Material_0 = float4(output.roughness, output.metallic, 1.0f, 1.0f);
	ps_out.Depth 	  = saturate(pin.depth.x / pin.depth.y);

	
	return ps_out;
}


